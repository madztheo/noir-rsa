use dep::std::println;
use dep::biguint::{BigUint32};
use dep::rsa::{verify_sha256_pkcs1v15};

fn main() {
    println("Testing verify_sha256_pkcs1v15 with inputs:");
    println(
        "Original Message: 'About ready south environment second finally. Work agency determine chance mean serve.'"
    );
    println(
        "Signature: 576745224752088557605724579075396240836094784473063860932429343679901243092360596350370941870180683657680865188551095458429546150960618883576826751753989"
    );
    println("e: 65537");
    println(
        "N: 7451117485959741229136504235315630995445254998446480425768448033902713699576518667817925145617353711577597420279881950650483923658530991624401513418271573"
    );

    let msg_hash = BigUint32 { limbs: [757857211, 3897100630, 1603039725, 3121664503, 1807780039, 2415911273, 3505641008, 2553448445, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] };

    let mut sha256_hash = [0 as u8; 32];
    for i in 0..32 {
        // Reverse
        sha256_hash[i] = msg_hash.to_bytes()[31 - i];
    }

    assert(
        verify_sha256_pkcs1v15(
            sha256_hash,
            BigUint32 { limbs: [1779565323, 685065050, 2781035974, 2566666274, 457214477, 4174352557, 3336616661, 331417037, 3918622676, 1245900170, 3293087938, 3751823217, 135049406, 3424229064, 708297768, 85964447, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] },
            BigUint32 { limbs: [65537, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] },
            BigUint32 { limbs: [3108848782, 3379431787, 4054075660, 41390431, 1646600258, 2974594469, 1512099444, 2380900311, 2151748501, 4128903501, 2266610658, 1997866568, 3252075684, 1458791716, 2506477758, 1428938545, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
        )
    );
}